PREFIX bdo: <http://purl.bdrc.io/ontology/core/>
PREFIX bdr: <http://purl.bdrc.io/resource/> 
PREFIX bf: <http://id.loc.gov/ontologies/bibframe/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX gist: <https://w3id.org/semanticarts/ns/ontology/gist/>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX told: <https://w3id.org/treasuryoflives/ns/data/tol/>
PREFIX tolo: <https://w3id.org/treasuryoflives/ns/ontology/tol/>
PREFIX tolx: <https://w3id.org/treasuryoflives/ns/taxonomy/tol/>
PREFIX xml: <http://www.w3.org/XML/1998/namespace>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX wiki: <https://www.wikidata.org/wiki/>

## Columns
# TOL ID
# TBRC RID
# Primary title
# Primary name
# Wylie title
# Wylie name
# Birth year
# Birth year approximate
# Birth year alternate
# Death year
# Death year approximate
# Death year alternate
# Gender
# HAR URL
# Death century
# Historical period
# Name displayed as
# Name variants
# Birth century
# Ordinal
# Wikidata ID

# Run: 
# tarql --dedup 30000 persons.tq > persons.ttl


CONSTRUCT {
    ?person_iri 
        a tolo:Person ;
        owl:sameAs ?bdrc_iri ,
        owl:sameAs ?wikidata_iri ;
        tolo:harUrl ?har_url ;

        tolo:preferredName ?preferred_name_tol ;
        tolo:preferredName ?preferred_name_wylie ;
        tolo:title ?title_tol ;
        tolo:title ?title_wylie ;
        tolo:alternateName ?alternate_name ;

        bdo:personGender ?gender_iri ;

        tolo:hasEvent ?birth_iri ;
        tolo:hasEvent ?death_iri ;
       

    ?birth_iri a tolo:Birth ;
        tolo:actualYear ?actual_birth_year_typed ;
        tolo:approximateYear ?approximate_birth_year_typed;
        tolo:alternateYear ?alternate_birth_year_typed ;
        tolo:alternateYear ?actual_alternate_birth_year_typed ;
        tolo:occursDuring ?birth_time_period_iri ;
       

    ?death_iri a tolo:Death ;
        tolo:actualYear ?actual_death_year_typed ;
        tolo:approximateYear ?approximate_death_year_typed ;
        tolo:alternateYear ?alternate_death_year_typed ;
        tolo:alternateYear ?actual_alternate_death_year_typed ;
        tolo:occursDuring ?death_time_period_iri ;
       

}

FROM <file:persons_2022-11-29.csv>

WHERE {

    # URIs and URLs
    BIND(tarql:expandPrefixedName(CONCAT("told:_Person_", ?TOL_ID)) AS ?person_iri)

    # owl:sameAs
    BIND(tarql:expandPrefixedName(CONCAT("bdr:", ?TBRC_RID)) AS ?bdrc_iri)
    BIND(tarql:expandPrefixedName(CONCAT("wiki:", ?Wikidata_ID)) AS ?wikidata_iri) 

    BIND(STRDT(?HAR_URL, xsd:anyURI) AS ?har_url)


    # NAMES AND TITLES

    # TOL name and title - follow BDRC in using language tag en
    BIND(STRLANG(?Primary_name, "en") AS ?preferred_name_tol)
    BIND(STRLANG(?Primary_title, "en") AS ?title_tol)

    # Wylie name and title
    BIND(STRLANG(?Wylie_name, "bo-x-ewts") AS ?preferred_name_wylie)
    BIND(STRLANG(?Wylie_title, "bo-x-ewts") AS ?title_wylie)

    # Incoming string format: name1, lang1; name2, lang2
    OPTIONAL { ?name_variant apf:strSplit(?Name_Variants ";") }
    BIND(REPLACE(?name_variant, ",.*", "") as ?name)
    BIND(
        IF(
            # Cover a few cases of missing language tag
            CONTAINS(?name_variant, ","),
            REPLACE(?name_variant, ".*,", ""), 
            ?unbound) 
        AS ?lang)
    BIND(IF(BOUND(?lang), STRLANG(?name, ?lang), ?name) AS ?alternate_name)


    # GENDER
    BIND(
        COALESCE(
            IF(?Gender = "M", tarql:expandPrefixedName("bdr:GenderMale"), ?unbound),
            IF(?Gender = "F", tarql:expandPrefixedName("bdr:GenderFemale"), ?unbound)
        )
        AS ?gender_iri
    )

    # To create an xsd:dateTime from a year string
    BIND("-01-01T00:00:00" AS ?date_time_completion)


    ## BIRTH 
    
    # Birth event
    BIND(IF(BOUND(?Birth_year) || BOUND(?Birth_century), 
        tarql:expandPrefixedName(CONCAT("told:_Birth_", ?TOL_ID)), ?unbound) AS ?birth_iri)

    # Birth year(s)
    BIND(
        COALESCE(
            IF(REGEX(?Birth_year, "^\\d{4}$"), ?Birth_year, ?unbound), 
            # Add initial 0 to 3-digit year to create a well-formed year
            IF(REGEX(?Birth_year, "^\\d{3}$"), CONCAT("0", ?Birth_year), ?unbound)
        )
        # Two-digit birth year (e.g., 11, 13) is always accompanied by a century, so don't generate a birth year. There is no data of this type for death years.
        AS ?full_birth_year
    )

    BIND(STRDT(CONCAT(?full_birth_year, ?date_time_completion), xsd:dateTime) AS ?full_birth_year_typed)

    # Split alternate year strings
    OPTIONAL {
        ?alternate_birth_year apf:strSplit(?Birth_year_alternate ", ")
    }

    BIND(
        COALESCE(
            IF(REGEX(?alternate_birth_year, "^\\d{4}$"), ?alternate_birth_year, ?unbound), 
            # Add initial 0 to 3-digit year to create a well-formed year
            IF(REGEX(?alternate_birth_year, "^\\d{3}$"), CONCAT("0", ?alternate_birth_year), ?unbound)
        )
        AS ?full_alternate_birth_year
    )
    BIND(STRDT(CONCAT(?full_alternate_birth_year, ?date_time_completion), xsd:dateTime) AS ?alternate_birth_year_typed)

    # Actual vs approximate vs alternate birth year
    BIND(IF(?Birth_year_approximate = "1", ?full_birth_year_typed, ?unbound) AS ?approximate_birth_year_typed)
    BIND(IF(!BOUND(?alternate_birth_year) && !BOUND(?approximate_birth_year_typed), ?full_birth_year_typed, ?unbound) AS ?actual_birth_year_typed)
    BIND(IF(BOUND(?alternate_birth_year), ?full_birth_year_typed, ?unbound) AS ?actual_alternate_birth_year_typed)

    # Birth century (including early, mid, and late) - only used if no birth year
    BIND(IF(!BOUND(?Birth_year), tarql:expandPrefixedName(CONCAT("told:_TimeInterval_", REPLACE(REPLACE(?Birth_century, " ", "_"), "[()]", ""))), ?unbound) AS ?birth_time_period_iri) 


    # DEATH 

    # Death event
    BIND(IF(BOUND(?Death_year), 
        # ignore century for now - data seems bad || BOUND(?Death_century),  
        tarql:expandPrefixedName(CONCAT("told:_Death_", ?TOL_ID)), ?unbound) AS ?death_iri)

    # Death years
    BIND(
        COALESCE(
            IF(REGEX(?Death_year, "^\\d{4}$"), ?Death_year, ?unbound), 
            # Add initial 0 to 3-digit year to create a well-formed year
            IF(REGEX(?Death_year, "^\\d{3}$"), CONCAT("0", ?Death_year), ?unbound)
        )
        AS ?full_death_year
    )

    BIND(STRDT(CONCAT(?full_death_year, ?date_time_completion), xsd:dateTime) AS ?full_death_year_typed)

    # Split alternate year strings
    OPTIONAL {
        ?alternate_death_year apf:strSplit(?Death_year_alternate ", ")
    }

    BIND(
        COALESCE(
            IF(REGEX(?alternate_death_year, "^\\d{4}$"), ?alternate_death_year, ?unbound), 
            # Add initial 0 to 3-digit year to create a well-formed year
            IF(REGEX(?alternate_death_year, "^\\d{3}$"), CONCAT("0", ?alternate_death_year), ?unbound)
        )
        AS ?full_alternate_death_year
    )
    BIND(STRDT(CONCAT(?full_alternate_death_year, ?date_time_completion), xsd:dateTime) AS ?alternate_death_year_typed)

    # Actual vs approximate vs alternate death year
    BIND(IF(?Death_year_approximate = "1", ?full_death_year_typed, ?unbound) AS ?approximate_death_year_typed)
    BIND(IF(!BOUND(?alternate_death_year) && !BOUND(?approximate_death_year_typed), ?full_death_year_typed, ?unbound) AS ?actual_death_year_typed)
    BIND(IF(BOUND(?alternate_death_year), ?full_death_year_typed, ?unbound) AS ?actual_alternate_death_year_typed)

    # Death century (including early, mid, and late) - only used if no death year
    # Ignore for now - awaiting corrected data
    BIND(IF(!BOUND(?Death_year), tarql:expandPrefixedName(CONCAT("told:_TimeInterval_", REPLACE(REPLACE(?Death_century, " ", "_"), "[()]", ""))), ?unbound) AS ?death_time_period_iri) 

    # HISTORICAL PERIOD - awaiting input
	BIND( tarql:expandPrefixedName(CONCAT("told:_TimeInterval_", REPLACE(?Historical_period, " ", "_") )) AS ?hist_period_iri )

}
