PREFIX bdo: <http://purl.bdrc.io/ontology/core/>
PREFIX bdr: <http://purl.bdrc.io/resource/> 
PREFIX bf: <http://id.loc.gov/ontologies/bibframe/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX gist: <https://ontologies.semanticarts.com/gist/>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX tol: <https://ontologies.treasuryoflives.org/tol/>
PREFIX tolx: <https://taxonomies.treasuryoflives.org/>
PREFIX told: <https://data.treasuryoflives.org/>
PREFIX xml: <http://www.w3.org/XML/1998/namespace>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX wiki: <https://www.wikidata.org/wiki/>

# TOL ID
# TBRC RID
# Primary title
# Primary name
# Wylie title
# Wylie name
# Birth year
# Birth year approximate
# Birth year alternate
# Death year
# Death year approximate
# Death year alternate
# Gender
# HAR URL
# Death century
# Historical period
# Name displayed as
# Name variants
# Birth century
# Ordinal
# Wikidata ID

# Run: tarql --dedup 30000 persons.tq > persons.ttl

CONSTRUCT {
    ?person_iri a tol:Person ;
        owl:sameAs ?bdrc_iri ;
        owl:sameAs ?wikidata_iri ;
        tol:harUrl ?har_url;

        tol:preferredName ?primary_name_tol ;
        tol:preferredName ?primary_name_wylie ;
        tol:title ?title_tol ;
        tol:title ?title_wylie ;
        tol:alternateName ?alternate_name_cleaned_tagged ;

        bdo:personGender ?gender_iri ;

        tol:hasEvent ?birth_iri ;
        tol:hasEvent ?death_iri ;
        .

    ?birth_iri a tol:Birth ;
        tol:isInCentury ?birth_century_iri ;
        tol:actualYear ?actual_birth_year_typed ;
        tol:approximateYear ?approximate_birth_year_typed;
        tol:alternateYear ?alternate_birth_year_typed ;
        tol:alternateYear ?actual_alternate_birth_year_typed ;
        .

    ?death_iri a tol:Death ;
        tol:isInCentury ?death_century_iri ;
        tol:actualYear ?actual_death_year_typed ;
        tol:approximateYear ?approximate_death_year_typed ;
        tol:alternateYear ?alternate_death_year_typed ;
        tol:alternateYear ?actual_alternate_death_year_typed ;
        .
}

FROM <file:ToL-Persons-8.16.22.csv>

WHERE {

    # owl:sameAs
    BIND(tarql:expandPrefixedName(CONCAT("told:_Person_", ?TOL_ID)) AS ?person_iri)
    BIND(tarql:expandPrefixedName(CONCAT("bdr:", ?TBRC_RID)) AS ?bdrc_iri)
    BIND(tarql:expandPrefixedName(CONCAT("wiki:", ?Wikidata_ID)) AS ?wikidata_iri) 

    BIND(STRDT(?HAR_URL, xsd:anyURI) AS ?har_url)

    # TOL name and title
    BIND(STRLANG(?Primary_name, "bo-x-phon-en-m-tol") AS ?primary_name_tol)
    BIND(STRLANG(?Primary_title, "bo-x-phon-en-m-tol") AS ?title_tol)

    # Wylie name and title
    BIND(STRLANG(?Wylie_name, "bo-x-ewts") AS ?primary_name_wylie)
    BIND(STRLANG(?Wylie_title, "bo-x-ewts") AS ?title_wylie)

    # Name variants
    OPTIONAL {
        ?name_variant apf:strSplit (?Name_Variants ";")
    }
    # Remove first comma-separated value representing name/title type, since we are ignoring these. E.g., "Nechung Choje (Personal Name, Library of Congress, English)" is converted to "Nechung Choje (Library of Congress, English)".
    BIND(REPLACE(?name_variant, "\\([^,]+, ", "(") AS ?alternate_name)
    BIND(REPLACE(?alternate_name, ".+\\((.+)\\)", "$1") AS ?encoding_lang)
    BIND(REPLACE(?alternate_name, " \\(.+\\) *", "") AS ?alternate_name_cleaned)
    BIND(
        COALESCE(
            IF(?encoding_lang = "Extended Wylie, English", "bo-x-phon-en-m-ewts", ?unbound),
            IF(?encoding_lang = "Extended Wylie, Sanskrit", "sa-x-ewts", ?unbound),
            IF(?encoding_lang = "Extended Wylie, Tibetan", "bo-x-ewts", ?unbound),
            IF(?encoding_lang = "Library of Congress, Chinese", "zh-alalc97", ?unbound),      
            IF(?encoding_lang = "Library of Congress, English", "bo-x-phon-en-m-alalc97", ?unbound),
            IF(?encoding_lang = "Library of Congress, Mongolian", "bo-x-phon-mn-m-alalc97", ?unbound),      
            IF(?encoding_lang = "Library of Congress, Russian", "bo-x-phon-ru-m-alalc97", ?unbound),
            IF(?encoding_lang = "Library of Congress, Sanskrit", "sa-alalc97", ?unbound),      
            IF(?encoding_lang = "Library of Congress, Tibetan", "bo-alalc97", ?unbound),
            IF(?encoding_lang = "Native, Chinese", "zh-Hani", ?unbound),  
            IF(?encoding_lang = "Native, English", "bo-x-phon-en-m-tol", ?unbound),  
            IF(?encoding_lang = "Native, Tibetan", "bo", ?unbound),  
            IF(?encoding_lang = "Phonetic, English", "bo-x-phon-en-m-tol", ?unbound),
            IF(?encoding_lang = "Phonetic, Tibetan", "bo-x-phon-en-m-tol", ?unbound),
            IF(?encoding_lang = "Pinyin, Tibetan", "bo-Latn-pinyin", ?unbound),      
            IF(?encoding_lang = "Sans Diacritics, Sanskrit", "sa-x-ndia", ?unbound)           
        )
        AS ?lang_tag  
    )
    BIND(STRLANG(?alternate_name_cleaned, ?lang_tag) AS ?alternate_name_cleaned_tagged)

    # Gender
    BIND(
        COALESCE(
            IF(?Gender = "M", tarql:expandPrefixedName("bdr:GenderMale"), ?unbound),
            IF(?Gender = "F", tarql:expandPrefixedName("bdr:GenderFemale"), ?unbound)
        )
        AS ?gender_iri
    )

    # To create an xsd:dateTime from the year string
    BIND("-01-01T00:00:00" AS ?date_time_completion)

    # BIRTH 
    
    # Birth event
    BIND(IF(BOUND(?Birth_year) || BOUND(?Birth_century), 
        tarql:expandPrefixedName(CONCAT("told:_Birth_", ?TOL_ID)), ?unbound) AS ?birth_iri)

    # Birth century
    BIND(tarql:expandPrefixedName(CONCAT("tolx:_Century_", REPLACE(REPLACE(?Birth_century, " ", "_"), "[()]", ""))) AS ?birth_century_iri) 

    # Birth year(s)

    # Add initial 0 to 3-digit year to create a well-formed year
    BIND(
        COALESCE(
            IF(REGEX(?Birth_year, "^\\d{4}$"), ?Birth_year, ?unbound), 
            IF(REGEX(?Birth_year, "^\\d{3}$"), CONCAT("0", ?Birth_year), ?unbound)
        )
        # Two-digit birth year (e.g., 11, 13) is always accompanied by a century, so don't generate a birth year. There is no data of this type for death years.
        AS ?full_birth_year
    )

    BIND(STRDT(CONCAT(?full_birth_year, ?date_time_completion), xsd:dateTime) AS ?full_birth_year_typed)

    # Split alternate year strings
    OPTIONAL {
        ?alternate_birth_year apf:strSplit(?Birth_year_alternate ", ")

    }
    # Add initial 0 to 3-digit year to create a well-formed year
    BIND(
        COALESCE(
            IF(REGEX(?alternate_birth_year, "^\\d{4}$"), ?alternate_birth_year, ?unbound), 
            IF(REGEX(?alternate_birth_year, "^\\d{3}$"), CONCAT("0", ?alternate_birth_year), ?unbound)
        )
        AS ?full_alternate_birth_year
    )
    BIND(STRDT(CONCAT(?full_alternate_birth_year, ?date_time_completion), xsd:dateTime) AS ?alternate_birth_year_typed)


    # Actual vs approximate vs alternate birth year
    BIND(IF(?Birth_year_approximate = "1", ?full_birth_year_typed, ?unbound) AS ?approximate_birth_year_typed)
    BIND(IF(!BOUND(?alternate_birth_year) && !BOUND(?approximate_birth_year_typed), ?full_birth_year_typed, ?unbound) AS ?actual_birth_year_typed)
    BIND(IF(BOUND(?alternate_birth_year), ?full_birth_year_typed, ?unbound) AS ?actual_alternate_birth_year_typed)

    # DEATH 

    # Death event
    BIND(IF(BOUND(?Death_year) || BOUND(?Death_century),  
        tarql:expandPrefixedName(CONCAT("told:_Death_", ?TOL_ID)), ?unbound) AS ?death_iri)

    # Death century
    BIND(tarql:expandPrefixedName(CONCAT("tolx:_Century_", REPLACE(REPLACE(?Death_century, " ", "_"), "[()]", ""))) AS ?death_century_iri) 

    # Add initial 0 to 3-digit year to create a well-formed year
    BIND(
        COALESCE(
            IF(REGEX(?Death_year, "^\\d{4}$"), ?Death_year, ?unbound), 
            IF(REGEX(?Death_year, "^\\d{3}$"), CONCAT("0", ?Death_year), ?unbound)
        )
        AS ?full_death_year
    )

    BIND(STRDT(CONCAT(?full_death_year, ?date_time_completion), xsd:dateTime) AS ?full_death_year_typed)

    # Split alternate year strings
    OPTIONAL {
        ?alternate_death_year apf:strSplit(?Death_year_alternate ", ")

    }
    # Add initial 0 to 3-digit year to create a well-formed year
    BIND(
        COALESCE(
            IF(REGEX(?alternate_death_year, "^\\d{4}$"), ?alternate_death_year, ?unbound), 
            IF(REGEX(?alternate_death_year, "^\\d{3}$"), CONCAT("0", ?alternate_death_year), ?unbound)
        )
        AS ?full_alternate_death_year
    )
    BIND(STRDT(CONCAT(?full_alternate_death_year, ?date_time_completion), xsd:dateTime) AS ?alternate_death_year_typed)


    # TODO - could put this in a large if
    # Actual vs approximate vs alternate death year
    BIND(IF(?Death_year_approximate = "1", ?full_death_year_typed, ?unbound) AS ?approximate_death_year_typed)
    BIND(IF(!BOUND(?alternate_death_year) && !BOUND(?approximate_death_year_typed), ?full_death_year_typed, ?unbound) AS ?actual_death_year_typed)
    BIND(IF(BOUND(?alternate_death_year), ?full_death_year_typed, ?unbound) AS ?actual_alternate_death_year_typed)

}
